# Generation of `dodo.toml`

1. ðŸ§  Magika detects file types
   â†’ Fast, parallel, respects .gitignore and exclusions

2. ðŸ“¥ Phi-3 checks if path (or name) indicates it's a config file
   â†’ e.g., pyproject.toml, ruff.toml, .prettierrc, go.mod, Cargo.toml
   â†’ If "maybe config", proceed. Otherwise skip.

3. ðŸ”„ Convert config file to JSON
   â†’ Use a modular "parser adapter" interface
     - `toml â†’ json`: [`toml`](https://docs.rs/toml)
     - `yaml â†’ json`: [`serde_yaml`](https://docs.rs/serde_yaml)
     - `ini â†’ json`: [`configparser`](https://crates.io/crates/configparser) or write mini-parser
     - `go.mod`, etc.: external Go tool â†’ output JSON

4. âœ… Send JSON to CUE
   â†’ If schema available, validate and normalize
   â†’ If schema *not* available, attempt inference (CUE supports structural inference)

5. ðŸ§© CUE returns clean, schema-aligned JSON
   â†’ Structure now looks like:
     ```json
     {
       "tool": "ruff",
       "version": "0.4.3",
       "config": { ... }
     }
     ```

6. ðŸ§  Phi-3 Mini processes clean JSON
   â†’ Now it's not hallucinating keys, confused by indentation or nesting
   â†’ Output: `{ tool: "ruff", deps: [...], config_version: "0.4.3" }`

7. ðŸ“¤ Dodo generates or updates `dodo.toml`
   â†’ Merge strategy can be:
     - `strict` (overwrite)
     - `merge` (preserve and add)
     - `interactive` (prompt if conflict, optional)
